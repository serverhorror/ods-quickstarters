// See https://www.opendevstack.org/ods-documentation/ for usage and customization.

@Library('ods-jenkins-shared-library@@shared_library_ref@') _

node {
  dockerRegistry = env.DOCKER_REGISTRY
  cypressRecordKey = env.CYPRESS_RECORD_KEY
}

odsComponentPipeline(
  podContainers: [
      containerTemplate(
        name: 'jnlp',
        image: "${dockerRegistry}/ods/jenkins-agent-nodejs20:@agent_image_tag@",
        workingDir: '/tmp',
        envVars: [
          envVar(key: 'CYPRESS_RECORD_KEY', value: cypressRecordKey)
        ],
        resourceRequestCpu: '100m',
        resourceLimitCpu: '300m',
        resourceRequestMemory: '1Gi',
        resourceLimitMemory: '2Gi',
        alwaysPullImage: true,
        args: '${computer.jnlpmac} ${computer.name}'
      )
    ],
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/': 'test'
  ]
) { context ->
  
  stageTest(context)
  odsComponentStageScanWithSonar(context)
  
  }

def stageTest(def context) {
  stage('Integration Test') {
    // OPTIONAL: load environment variables for Azure SSO with MSALv2; please adapt variable names to your OpenShift config
    // sh "oc project <project-with-configured-secrets>"
    // cypressUser = sh(returnStdout: true, script:"oc get secret e2euser -o jsonpath='{.data.USERNAME}' | base64 -d")
    // cypressPassword = sh(returnStdout: true, script:"oc get secret e2euser -o jsonpath='{.data.PASSWORD}' | base64 -d")
    // azureClientId = sh(returnStdout: true, script:"oc get secret azure -o jsonpath='{.data.AZURE_CLIENT_ID}' | base64 -d")
    // azureClientSecret = sh(returnStdout: true, script:"oc get secret azure -o jsonpath='{.data.AZURE_CLIENT_SECRET}' | base64 -d")
    // azureTenantId = sh(returnStdout: true, script:"oc get configmaps azure -o jsonpath='{.data.AZURE_TENANT}'") // config map values are not base64 encoded

    withEnv(["TAGVERSION=${context.tagversion}",
      "NEXUS_HOST=${context.nexusHost}",
      "OPENSHIFT_PROJECT=${context.targetProject}",
      "OPENSHIFT_APP_DOMAIN=${context.getOpenshiftApplicationDomain()}",
      // "CYPRESS_TENANT_ID=${azureTenantId}",
      // "CYPRESS_CLIENT_ID=${azureClientId}",
      // "CYPRESS_CLIENT_SECRET=${azureClientSecret}",
      // "CYPRESS_USERNAME=${cypressUser}",
      // "CYPRESS_PASSWORD=${cypressPassword}"
    ]) {
      sh 'npm install'
      def status = sh(script: 'npm run e2e', returnStatus: true)
      sh 'npm run combine:reports'
      junit(testResults:'build/test-results/*.xml', allowEmptyResults: true)
      stash(name: "installation-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/installation-junit.xml', allowEmpty: true)
      stash(name: "integration-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/integration-junit.xml', allowEmpty: true)
      stash(name: "acceptance-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/acceptance-junit.xml', allowEmpty: true)
      zip zipFile: 'cypress/videos.zip', archive: false, dir: 'cypress/videos'
      stash(name: "acceptance-test-videos-${context.componentId}-${context.buildNumber}", includes: 'cypress/videos.zip', allowEmpty: true)
      archiveArtifacts artifacts: 'cypress/videos.zip', fingerprint: true, daysToKeep: 2, numToKeep: 3
      if (status != 0) {
        zip zipFile: 'cypress/screenshots.zip', archive: false, dir: 'cypress/screenshots'
        stash(name: "acceptance-test-screenshots-${context.componentId}-${context.buildNumber}", includes: 'cypress/screenshots.zip', allowEmpty: true)
        archiveArtifacts artifacts: 'cypress/screenshots.zip', fingerprint: true, daysToKeep: 2, numToKeep: 3
      }
      return status
    }
  }
}
