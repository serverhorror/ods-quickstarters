def odsNamespace = ''
def odsGitRef = ''
def odsImageTag = ''
def sharedLibraryRef = ''
def agentImageTag = ''

node {
  odsNamespace = env.ODS_NAMESPACE ?: 'ods'
  odsGitRef = env.ODS_GIT_REF ?: 'master'
  odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
  sharedLibraryRef = env.SHARED_LIBRARY_REF ?: odsImageTag
  agentImageTag = env.AGENT_IMAGE_TAG ?: odsImageTag
}

library("ods-jenkins-shared-library@${sharedLibraryRef}")

odsQuickstarterPipeline(
  imageStreamTag: "${odsNamespace}/jenkins-agent-nodejs20:${agentImageTag}",
) { context ->

  stage("init Project") {
    dir("$context.targetDir") {
      print "Generate package json"
      sh "npm init -y"

      print "Install dependencies"
      def typescriptVersion = "5.3.2"
      def nodeTypeVersion = "20.10.0"
      def expressVersion = "4.18.2"
      def jestVersion = "29.7.0"
      def jestTypeVersion = "29.5.10"
      def jestJunitVersion = "16.0.0"

      sh "npm i typescript@$typescriptVersion express@$expressVersion @types/node@$nodeTypeVersion jest@$jestVersion @types/jest@$jestTypeVersion"
      sh "npm i jest-junit@$jestJunitVersion --save-dev"

      print "Generate ts config file. Skip library check and redirect transpiled ts files to dist folder."
      print "Target 15.0.0 and newer versions. Tell the compiler it is okay to output JS syntax features from ES2018."
      sh "npx tsc --init --lib 'es2018' --target 'es2018' --skipLibCheck --outDir './dist'"

      print "Modify script commands in package json file"
      addScriptsToPackageJson()
    }
  }

  odsQuickstarterStageCopyFiles(context)

  odsQuickstarterStageCreateOpenShiftResources(
    context,
    [directory: 'common/ocp-config/component-environment']
  )
  odsQuickstarterStageRenderJenkinsfile(context)

  odsQuickstarterStageRenderSonarProperties(context)
}

def addScriptsToPackageJson() {
  def data = readJSON file: './package.json'
  data.scripts.test = "JEST_JUNIT_OUTPUT_DIR='build/test-results/test' JEST_JUNIT_OUTPUT_NAME='test-results.xml' npx jest --reporters=default --reporters=jest-junit --coverage --coverageDirectory=coverage_output --forceExit ./dist"
  data.scripts.put("build", "tsc")
  data.scripts.put("start", "node dist/src/index.js")
  writeJSON file: './package.json', json: data, pretty: 4
}
