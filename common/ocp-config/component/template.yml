apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: component-template
  app: "${PROJECT}-${COMPONENT}"
parameters:
- name: PROJECT
  displayName: Application
  description: The name of the application project.
  required: true
- name: COMPONENT
  displayName: Component
  description: The name of the application component.
  required: true
- name: ENV
  displayName: Environment
  description: The environment stage.
  required: true
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory available for the container.
  value: 256Mi
- name: MEMORY_REQUEST
  displayName: Memory Request
  description: Minimum amount of memory requested for the container.
  value: 128Mi
- name: CPU_LIMIT
  displayName: CPU Limit
  description: Maximum CPU (milli) cores available for the container.
  value: 100m
- name: CPU_REQUEST
  displayName: CPU Request
  description: Minimum CPU (milli) cores requested for the container.
  value: 50m
- name: TAGVERSION
  displayName: tag version
  description: The version to be used.
  value: latest
  required: true
- name: READINESS_PATH
  description: Path for readiness probe
  value: /health
- name: READINESS_INITIAL_DELAY
  description: Initial delay of readiness probe in seconds
  value: "3"
- name: READINESS_PERIOD
  description: Period of readiness probe in seconds
  value: "10"
- name: READINESS_TIMEOUT
  description: Timeout of readiness probe in seconds
  value: "3"
- name: LIVENESS_PATH
  description: Path for liveness probe
  value: /health
- name: LIVENESS_INITIAL_DELAY
  description: Initial delay of liveness probe in seconds
  value: "6"
- name: LIVENESS_PERIOD
  description: Period of liveness probe in seconds
  value: "10"
- name: LIVENESS_TIMEOUT
  description: Timeout of liveness probe in seconds
  value: "3"
- name: PORT
  description: Port of service / container
  value: "8080"
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: "${COMPONENT}"
  spec:
    ports:
      - name: ${PORT}-tcp
        port: "${{PORT}}"
        protocol: TCP
        targetPort: "${{PORT}}"
    selector:
      app: "${PROJECT}-${COMPONENT}"
      deploymentconfig: "${COMPONENT}"
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: "${COMPONENT}"
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: "${PROJECT}-${COMPONENT}"
      deploymentconfig: "${COMPONENT}"
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      type: Recreate
    template:
      metadata:
        labels:
          app: "${PROJECT}-${COMPONENT}"
          deploymentconfig: "${COMPONENT}"
      spec:
        containers:
          - image: "${PROJECT}-${ENV}/${COMPONENT}:${TAGVERSION}"
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: "${LIVENESS_PATH}"
                port: "${{PORT}}"
                scheme: HTTP
              initialDelaySeconds: "${{LIVENESS_INITIAL_DELAY}}"
              periodSeconds: "${{LIVENESS_PERIOD}}"
              successThreshold: 1
              timeoutSeconds: "${{LIVENESS_TIMEOUT}}"
            name: "${COMPONENT}"
            ports:
              - containerPort: "${{PORT}}"
                protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: "${READINESS_PATH}"
                port: "${{PORT}}"
                scheme: HTTP
              initialDelaySeconds: "${{READINESS_INITIAL_DELAY}}"
              periodSeconds: "${{READINESS_PERIOD}}"
              successThreshold: 1
              timeoutSeconds: "${{READINESS_TIMEOUT}}"
            resources:
              limits:
                cpu: "${CPU_LIMIT}"
                memory: "${MEMORY_LIMIT}"
              requests:
                cpu: "${CPU_REQUEST}"
                memory: "${MEMORY_REQUEST}"
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - "${COMPONENT}"
          from:
            kind: ImageStreamTag
            name: "${COMPONENT}:${TAGVERSION}"
            namespace: "${PROJECT}-${ENV}"
        type: ImageChange
